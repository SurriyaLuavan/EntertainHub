import Head from "next/head";
import Link from "next/link";
import styles from "/styles/FormField.module.css";
import AuthLayout from "@/components/AuthLayout";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useState } from "react";

export default function Signup() {
  const [focus, setFocus] = useState({
    email: true,
    password: true,
    confirm: true,
  });

  function handleFocus(e) {
    setFocus((prev) => {
      return { ...prev, [e.target.name]: true };
    });
  }

  function handleBlur(e) {
    setFocus((prev) => {
      return { ...prev, [e.target.name]: false };
    });
  }

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
      confirm: "",
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Invalid email address").required("Required"),
      password: Yup.string().required("Required").min(8, "Min. 8 characters"),
      confirm: Yup.string()
        .required("Required")
        .oneOf([Yup.ref("password"), null], "Password must match"),
    }),
    onSubmit: (values) => {
      alert(JSON.stringify(values, null, 2));
    },
  });

  return (
    <>
      <Head>
        <title>Sign-up | EntertainHub</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/favicon.png" />
      </Head>

      <AuthLayout type="Sign Up" onSubmit={formik.handleSubmit}>
        <label htmlFor="email" className={styles.inputFieldContainer}>
          <input
            type="email"
            id="email"
            name="email"
            onChange={formik.handleChange}
            value={formik.values.email}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className={`${styles.inputField} | ${styles.fsInput} ${
              formik.errors.email && !focus.email && styles.errorField
            } bg-primary-600 text-neutral-100 fw-light`}
            placeholder="Email address"
          />
          {formik.errors.email && !focus.email ? (
            <div
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
            >
              {formik.errors.email}
            </div>
          ) : null}
        </label>
        <label htmlFor="password" className={styles.inputFieldContainer}>
          <input
            type="password"
            id="password"
            name="password"
            onChange={formik.handleChange}
            value={formik.values.password}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className={`${styles.inputField}  | ${styles.fsInput} ${
              !focus.password && formik.errors.password && styles.errorField
            } bg-primary-600 text-neutral-100 fw-light`}
            placeholder="Password"
          />
          {!focus.password && formik.errors.password ? (
            <div
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
            >
              {formik.errors.password}
            </div>
          ) : null}
        </label>
        <label htmlFor="confirm" className={styles.inputFieldContainer}>
          <input
            type="password"
            id="confirm"
            name="confirm"
            onChange={formik.handleChange}
            value={formik.values.confirm}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className={`${styles.inputField}  | ${styles.fsInput} ${
              !focus.confirm && formik.errors.confirm && styles.errorField
            } bg-primary-600 text-neutral-100 fw-light`}
            placeholder="Repeat password"
          />
          {!focus.confirm && formik.errors.confirm && (
            <span
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
            >
              {formik.errors.confirm}
            </span>
          )}
        </label>
        <button
          type="submit"
          className={`${styles.submitButton} | ${styles.fsInput} fw-light`}
        >
          Create an account
        </button>
        <p className={`${styles.fsInput} ${styles.para} fw-light`}>
          Already have an account?{" "}
          <Link href="/login" className="text-accent">
            Login
          </Link>
        </p>
      </AuthLayout>
    </>
  );
}
