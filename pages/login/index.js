import AuthLayout from "@/components/AuthLayout";
import Head from "next/head";
import Link from "next/link";
import styles from "/styles/FormField.module.css";
import { useFormik } from "formik";
import * as Yup from "yup";

export default function Login() {
  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema: Yup.object({
      email: Yup.string().email("Invalid email address").required("Required"),
      password: Yup.string().required("Required"),
    }),
    onSubmit: (values) => {
      alert(JSON.stringify(values, null, 2));
    },
  });

  return (
    <>
      <Head>
        <title>Login | EntertainHub</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/assets/favicon.png" />
      </Head>
      <AuthLayout type="Login" onSubmit={formik.handleSubmit}>
        <label htmlFor="email" className={styles.inputFieldContainer}>
          <input
            type="email"
            id="email"
            {...formik.getFieldProps("email")}
            className={`${styles.inputField} | ${styles.fsInput} ${
              formik.touched.email && formik.errors.email && styles.errorField
            } bg-primary-600 text-neutral-100 fw-light`}
            placeholder="Email address"
          />
          {formik.touched.email && formik.errors.email ? (
            <div
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
            >
              {formik.errors.email}
            </div>
          ) : null}
        </label>
        <label htmlFor="password" className={styles.inputFieldContainer}>
          <input
            type="password"
            id="password"
            {...formik.getFieldProps("password")}
            className={`${styles.inputField}  | ${styles.fsInput} ${
              formik.touched.password &&
              formik.errors.password &&
              styles.errorField
            } bg-primary-600 text-neutral-100 fw-light`}
            placeholder="Password"
          />
          {formik.touched.password && formik.errors.password ? (
            <div
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
            >
              {formik.errors.password}
            </div>
          ) : null}
        </label>
        <button
          type="submit"
          className={`${styles.submitButton} | ${styles.fsInput} fw-light`}
        >
          Login to your account
        </button>
        <p className={`${styles.fsInput} ${styles.para} fw-light`}>
          Don&apos;t have an account?{" "}
          <Link className="text-accent" href="/sign-up">
            Sign Up
          </Link>
        </p>
      </AuthLayout>
    </>
  );
}

{
  /* <Formik
          initialValues={{ email: "", password: "" }}
          validationSchema={Yup.object({
            email: Yup.string()
              .email("Invalid email address")
              .required("Required"),
            password: Yup.string().required("Required"),
          })}
          onSubmit={(values, { setSubmitting }) => {
            setTimeout(() => {
              alert(JSON.stringify(values, null, 2));
              setSubmitting(false);
            }, 400);
          }}
        >
          <Form className={`${styles.formContainer} bg-primary-600`}>
            <h1 className={`${styles.fsHeading} fw-light`}>Login</h1>
            <Field
              className={`${styles.inputField} | ${styles.fsInput} ${
                isTouched && error
              } bg-primary-600 text-neutral-100 fw-light`}
              name="email"
              type="email"
              placeholder="Email address"
            />
            <ErrorMessage
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
              name="email"
            />
            <Field
              className={`${styles.inputField} | ${styles.fsInput} ${
                isTouched && error
              } bg-primary-600 text-neutral-100 fw-light`}
              name="password"
              type="password"
              placeholder="Password"
            />
            <ErrorMessage
              className={` ${styles.errorMessage} ${styles.fsError} text-accent fw-light`}
              name="password"
            />
          </Form>
        </Formik> */
}
